{
  "name": "003-data-analysis-chat-agent",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "9db77e6e-2d12-4d37-a94c-7bba365d3ef1",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [-800, 208],
      "webhookId": "cdc03fce-33b6-4eed-86b5-f628994e5e31",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful assistant.\nCurrent timestamp is {{ $now }}",
          "maxIterations": 15
        }
      },
      "id": "78d2739d-4d70-4ca9-af1a-a70b6be721b2",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [-576, 208],
      "typeVersion": 1.7
    },
    {
      "parameters": {},
      "id": "8dc7e687-d891-4ff2-8462-ce863a937dc7",
      "name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "position": [224, 240],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Ensure there's at least one input item.\nif (!items || items.length === 0) {\n  throw new Error(\"No input items found.\");\n}\n\n// Our input is expected to have a 'data' property containing the JSONP string.\nconst input = items[0].json;\n\nif (!input.data) {\n  throw new Error(\"Input JSON does not have a 'data' property.\");\n}\n\nconst rawData = input.data;\n\n// Use a regex to extract the JSON content from the Google Visualization JSONP response.\nconst regex = /google\\.visualization\\.Query\\.setResponse\\((.*)\\);?$/s;\nconst match = rawData.match(regex);\n\nif (!match) {\n  throw new Error(\"Input data does not match the expected Google Visualization JSONP format.\");\n}\n\nconst jsonString = match[1];\n\n// Parse the extracted JSON string.\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonString);\n} catch (error) {\n  throw new Error(\"Failed to parse JSON: \" + error.message);\n}\n\n// Verify that the parsed JSON has the expected 'table' structure with 'cols' and 'rows'.\nif (!parsed.table || !Array.isArray(parsed.table.cols) || !Array.isArray(parsed.table.rows)) {\n  throw new Error(\"Parsed JSON does not have the expected 'table' structure with 'cols' and 'rows'.\");\n}\n\nconst cols = parsed.table.cols;\nconst rows = parsed.table.rows;\n\n// Helper function to convert date string from \"Date(YYYY,M,D)\" to \"YYYY-MM-DD\"\nfunction formatDate(dateStr) {\n  const match = dateStr.match(/^Date\\((\\d+),(\\d+),(\\d+)\\)$/);\n  if (!match) return dateStr;\n  const year = parseInt(match[1], 10);\n  const month = parseInt(match[2], 10) + 1; // JavaScript months are 0-indexed\n  const day = parseInt(match[3], 10);\n  // Format with leading zeros\n  return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n}\n\n// Map each row into an object using the column labels as keys.\nconst newItems = rows.map(row => {\n  const obj = {};\n  cols.forEach((col, index) => {\n    let value = row.c && row.c[index] ? row.c[index].v : null;\n    // If the column type is \"date\" and the value is a string that looks like \"Date(YYYY,M,D)\"\n    if (col.type === \"date\" && typeof value === \"string\") {\n      value = formatDate(value);\n    }\n    obj[col.label] = value;\n  });\n  return { json: obj };\n});\n\n// Return the new array of items.\nreturn newItems;\n"
      },
      "id": "a6f992aa-cd1d-44b9-a776-0161bf32a42c",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [32, 1184],
      "typeVersion": 2
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "start_date"
            },
            {
              "name": "end_date"
            },
            {
              "name": "status"
            },
            {
              "name": "sheet_url"
            }
          ]
        }
      },
      "id": "443105ef-e2c7-4596-bea6-0748a09cfcd9",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [-544, 1184],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "name": "records_by_date_and_or_status",
        "description": "Use this tool to get records filtered by date. You can also filter by status at the same time, if you want.",
        "workflowId": {
          "__rl": true,
          "value": "KWGvh1pQb3TZNKzp",
          "mode": "list",
          "cachedResultName": "003-tool-records-by-date"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "end_date": "={{ $fromAI(\"end_date\", \"End date in format YYYY-MM-DD\", \"string\") }}",
            "start_date": "={{ $fromAI(\"start_date\", \"Start date in format YYYY-MM-DD\", \"string\") }}",
            "sheet_url": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "start_date",
              "displayName": "start_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "end_date",
              "displayName": "end_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "sheet_url",
              "displayName": "sheet_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "64e8a570-a309-4b08-9a70-dc441904195b",
      "name": "Records by date",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [208, 432],
      "typeVersion": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "2479dfae-6c11-416a-a880-651ca4c578ed",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [464, 1184],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "要将所有项目发送回AI，我们需要将所有内容汇总成一个单一项目完成。\n\n否则它会一次只响应一个项目，而AI只会收到",
        "height": 400,
        "width": 220,
        "color": 7
      },
      "id": "22074196-1705-4163-b121-d8b4b3ffa5d0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [400, 944],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "该节点向Google Sheets API发送自定义HTTP请求。\n\n在Google Sheets API中按日期范围筛选非常复杂。\n\n此节点解决了该问题。\n\n但在数据库中实现相同功能则简单得多，工具无需子工作流即可完成。",
        "height": 400,
        "width": 300,
        "color": 7
      },
      "id": "25721e1d-b591-4b37-be8f-1a8efbffbfa7",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-368, 944],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "这个复杂请求的输出结果也很混乱。\n\n所以我们用了一些由ChatGPT生成的代码来将数据转换为JSON对象。",
        "height": 400,
        "width": 220,
        "color": 7
      },
      "id": "f317c4fe-b07f-41b0-b9ff-af43fb8a3815",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-48, 944],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/gviz/tq",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "sheet",
              "value": "Sheet1"
            },
            {
              "name": "tq",
              "value": "=SELECT * WHERE A >= DATE \"{{ $json.start_date }}\" AND A <= DATE \"{{ $json.end_date }}\""
            }
          ]
        },
        "options": {}
      },
      "id": "663e5cd1-b1ec-4bfa-9d20-c3aeaabfdba9",
      "name": "Google Sheets request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-256, 1184],
      "typeVersion": 4.2,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "xlEP6tfSqenVmLrj",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find transactions by product.\nOur products are:\n- Widget A\n- Widget B\n- Widget C\n- Widget D",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/edit?gid=0#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18A4d7KYrk8-uEMbu7shoQe_UIzmbTLV1FMN43bjA7qc/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Product",
              "lookupValue": "={{ $fromAI(\"product_name\", \"The product name\", \"string\") }}"
            }
          ]
        },
        "options": {}
      },
      "id": "702426fb-56c7-4b9c-b53e-6f972d06d9ef",
      "name": "Get transactions by product name",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [-80, 288],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "xlEP6tfSqenVmLrj",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Only use this as last resort, because it will pull all data at once.",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/edit?gid=0#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "工作表1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/edit#gid=0"
        },
        "options": {}
      },
      "id": "ee223a3a-3e52-438b-9e9f-2c421481c08a",
      "name": "Get all transactions",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [-80, 496],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "xlEP6tfSqenVmLrj",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 可以尝试的问题\n本页面上有一个红色按钮，点击即可与AI聊天。\n\n试着问它这些问题：\n\n- 2025年1月我们有多少笔成功销售，最终收入是多少？\n\n- 2025年1月哪位 Sale ID 的退款最多？\n\n- 退款最常见的原因是什么？\n\n- 2025年2月份有多少笔退款，退款金额是多少？",
        "height": 340,
        "width": 320,
        "color": 4
      },
      "id": "595d70f9-744d-4348-8f8a-f71a427b2a22",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1184, 208],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 将此表格文件复制到你的Google云端硬盘\nhttps://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/edit?usp=sharing",
        "width": 400,
        "color": 4
      },
      "id": "0f5403cf-944b-49c5-8c14-873483d38f9f",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 208],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### 如何连接Google表格？\n要将您的n8n连接到Google表格，您需要获取Google OAuth凭据\n\n查看文档 [此处](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/)",
        "width": 400,
        "color": 4
      },
      "id": "2e9b6d18-5030-44e4-a1de-13207051fa31",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 384],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 👆\n这里可以使用多种模型，包括免费的Google Gemini选项。\n\n务必进行全面测试。",
        "height": 260,
        "width": 170,
        "color": 7
      },
      "id": "0eef8826-91c2-4245-932f-38433d70faca",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-704, 560],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 👆\n这是一个短期记忆功能。它会在聊天过程中记住最近的5次互动",
        "height": 260,
        "width": 150,
        "color": 7
      },
      "id": "b0f697e7-826a-4eab-b35a-f44ad98c8c5c",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-480, 560],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "cf1df26a-e445-44fd-8fac-80da1c2f4943",
      "name": "Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [-464, 448],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "**AI工具代理**可以同时访问所有工具。它根据名称和描述来决定何时使用每个工具。\n\n注意，我在所有工具中都使用了`$fromAI`函数。\n\n查看文档 **[此处](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/)**",
        "height": 180,
        "width": 340,
        "color": 7
      },
      "id": "0c4b8e71-f292-491b-92a4-a645f0e89750",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [448, 208],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 👈 这是一个特殊工具\n用于调用另一个工作流。\n这个概念被称为子工作流。\n\n查看文档[此处](https://docs.n8n.io/flow-logic/subworkflows/)。\n\n我们并非运行完全独立的工作流，而是调用下方的工作流。\n\n它包含在同一个工作流中，但通过触发器设定仅在被此工具调用时才会运行。\n\n**建立步骤**:\n\n1. 新建一个工作流，命名为 003-tool-records-by-date (你可以自定义)\n2. 复制👇下面的 sub-workflow 到新工作流并保存\n3. 修改 Records by date 节点里面的工作流 id ，**注意同时修改 sheet url**",
        "height": 416,
        "width": 500,
        "color": 7
      },
      "id": "b0fd9455-56d7-40fb-91b3-8e7917b6937d",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [448, 448],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 子工作流\nAI可以随时调用此子工作流，\n通过使用 **按日期记录** 工具。\n\n子工作流会自动将\n最后一个执行节点的结果返回给AI。",
        "height": 520,
        "width": 1380,
        "color": 7
      },
      "id": "0024f9eb-53f6-4965-8f68-d3a0e741a6bd",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-704, 880],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e50da873-bbbd-41d3-a418-83193907977c",
              "operator": {
                "type": "string",
                "operation": "contains"
              },
              "leftValue": "={{ $json.Status }}",
              "rightValue": "={{ $('When Executed by Another Workflow').item.json.status }}"
            }
          ]
        },
        "options": {}
      },
      "id": "23ad30d1-fe73-4587-9aed-39663f36706d",
      "name": "Filter by status",
      "type": "n8n-nodes-base.filter",
      "position": [240, 1184],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find transactions by status",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1lfXChb27l516DZS1rpT-I2G83dwtbV629qAtCECIAks/edit?gid=0#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18A4d7KYrk8-uEMbu7shoQe_UIzmbTLV1FMN43bjA7qc/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "={{ $fromAI(\"transaction_status\", \"Transaction status can be Refund, Completed or Error\", \"string\") }}"
            }
          ]
        },
        "options": {}
      },
      "id": "c3b66761-8ab7-4098-ac91-2afc0a7c7905",
      "name": "Get transactions by status",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [-80, 96],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "xlEP6tfSqenVmLrj",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 在所有Sheets工具中更改Sheets文件的URL 👇",
        "width": 300,
        "color": 4
      },
      "id": "332d4ebe-6d44-4d79-80d7-b8c9fa19ec1b",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [-240, -112],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [-656, 432],
      "id": "79400103-7005-423e-9609-d48bcb4e38e1",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "LzizVN9bwv8IEkUQ",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 👆 更改Sheets文件的URL ",
        "height": 100,
        "width": 260,
        "color": 4
      },
      "id": "1c464f90-f697-40bd-9c55-34eea8fe54db",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "position": [160, 560],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### 👈\n计算器是一种工具，能让代理执行数学运算。",
        "height": 140,
        "width": 200,
        "color": 7
      },
      "id": "17a4d503-13f7-4f16-9a74-dedf15f386d8",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [704, 880],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Filter by status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Records by date": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter by status": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all transactions": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get transactions by status": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get transactions by product name": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Google Sheets request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bfc5c9f3-40a3-4264-b3b7-b2d8e984861a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5e625b5608e930abe33b2b4e85cd61aef4f57fd6de67f21d46ac442545f1efd2"
  },
  "id": "uHfBnlNvP7J4HYyL",
  "tags": []
}
